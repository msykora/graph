//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataLoader.DataService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="node", Namespace="")]
    [System.SerializableAttribute()]
    public partial class node : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string labelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DataLoader.DataService.adjacentNodes adjacentNodesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string id {
            get {
                return this.idField;
            }
            set {
                if ((object.ReferenceEquals(this.idField, value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string label {
            get {
                return this.labelField;
            }
            set {
                if ((object.ReferenceEquals(this.labelField, value) != true)) {
                    this.labelField = value;
                    this.RaisePropertyChanged("label");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public DataLoader.DataService.adjacentNodes adjacentNodes {
            get {
                return this.adjacentNodesField;
            }
            set {
                if ((object.ReferenceEquals(this.adjacentNodesField, value) != true)) {
                    this.adjacentNodesField = value;
                    this.RaisePropertyChanged("adjacentNodes");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="adjacentNodes", Namespace="", ItemName="id")]
    [System.SerializableAttribute()]
    public class adjacentNodes : System.Collections.Generic.List<string> {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DataService.IDataService")]
    public interface IDataService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/Get", ReplyAction="http://tempuri.org/IDataService/GetResponse")]
        DataLoader.DataService.node[] Get();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/Get", ReplyAction="http://tempuri.org/IDataService/GetResponse")]
        System.Threading.Tasks.Task<DataLoader.DataService.node[]> GetAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/Put", ReplyAction="http://tempuri.org/IDataService/PutResponse")]
        void Put(DataLoader.DataService.node[] nodes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataService/Put", ReplyAction="http://tempuri.org/IDataService/PutResponse")]
        System.Threading.Tasks.Task PutAsync(DataLoader.DataService.node[] nodes);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDataServiceChannel : DataLoader.DataService.IDataService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataServiceClient : System.ServiceModel.ClientBase<DataLoader.DataService.IDataService>, DataLoader.DataService.IDataService {
        
        public DataServiceClient() {
        }
        
        public DataServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DataServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public DataLoader.DataService.node[] Get() {
            return base.Channel.Get();
        }
        
        public System.Threading.Tasks.Task<DataLoader.DataService.node[]> GetAsync() {
            return base.Channel.GetAsync();
        }
        
        public void Put(DataLoader.DataService.node[] nodes) {
            base.Channel.Put(nodes);
        }
        
        public System.Threading.Tasks.Task PutAsync(DataLoader.DataService.node[] nodes) {
            return base.Channel.PutAsync(nodes);
        }
    }
}
